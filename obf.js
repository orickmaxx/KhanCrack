// loader.template.js
// Minimal self-decoder / loader to be published (obf.js).
// The payload JSON is injected at build time. It contains ciphertext, salt, iv, tag, mask, iterations.

(async function(){
    try {
      const payload = {"v":1,"ciphertext":"","salt":"1XxwPtGkzxxz2CoFCvPJYg==","iv":"8H4Eq0jZdSti+yJI","tag":"Fc9qlMryB4tOeboC6Xd0Ag==","mask":112,"iterations":200000,"meta":{"originalSize":18160}};
  
      // CONFIG: if true -> prompt user for passphrase; if false -> use window.__OBFUSCATOR_PASS (injected externally)
      const PROMPT_FOR_PASS = true;
  
      function b64ToUint8Array(b64) {
        const bin = atob(b64);
        const len = bin.length;
        const arr = new Uint8Array(len);
        for (let i = 0; i < len; i++) arr[i] = bin.charCodeAt(i);
        return arr;
      }
  
      // obtain passphrase
      let pass = null;
      if (PROMPT_FOR_PASS) {
        pass = prompt('Enter private passphrase to decrypt the bookmarklet:');
        if (!pass) { console.warn('No passphrase entered; aborting.'); return; }
      } else {
        pass = window.__OBFUSCATOR_PASS;
        if (!pass) { console.warn('No global pass found at window.__OBFUSCATOR_PASS; aborting.'); return; }
      }
  
      // Web Crypto path
      if (window.crypto && window.crypto.subtle) {
        const salt = b64ToUint8Array(payload.salt);
        const iv = b64ToUint8Array(payload.iv);
        const tag = b64ToUint8Array(payload.tag);
        const ciphertext = b64ToUint8Array(payload.ciphertext);
        const iterations = payload.iterations || 200000;
  
        // derive key
        const enc = new TextEncoder();
        const passKey = await crypto.subtle.importKey('raw', enc.encode(pass), {name:'PBKDF2'}, false, ['deriveKey']);
        const aesKey = await crypto.subtle.deriveKey(
          {name:'PBKDF2', salt, iterations, hash: 'SHA-512'},
          passKey,
          {name:'AES-GCM', length: 256},
          false,
          ['decrypt']
        );
  
        // combine ciphertext and tag (some implementations expect tag appended)
        const ctWithTag = new Uint8Array(ciphertext.length + tag.length);
        ctWithTag.set(ciphertext, 0);
        ctWithTag.set(tag, ciphertext.length);
  
        try {
          // decrypt using AES-GCM with iv and tag appended.
          const plainBuf = await crypto.subtle.decrypt({name:'AES-GCM', iv: iv}, aesKey, ctWithTag.buffer);
          // plainBuf is the xored payload (Uint8Array)
          const plainBytes = new Uint8Array(plainBuf);
          // reverse XOR mask
          const mask = payload.mask & 0xFF;
          for (let i = 0; i < plainBytes.length; i++) plainBytes[i] = plainBytes[i] ^ mask;
          // convert to string
          const decoder = new TextDecoder();
          const jsSource = decoder.decode(plainBytes);
  
          // subtle anti-tamper / integrity quick check (size)
          if (payload.meta && payload.meta.originalSize && jsSource.length !== payload.meta.originalSize) {
            console.warn('Warning: payload size mismatch (possible tampering). Proceeding but be careful.');
          }
  
          // execute safely via Function constructor (indirect eval)
          (new Function(jsSource))();
        } catch (e) {
          console.error('Decryption failed (wrong passphrase or tampered payload).', e);
        }
        return;
      }
  
      // Fallback: WebCrypto not available
      alert('WebCrypto API not available in this browser. Cannot decrypt payload securely.');
    } catch (err) {
      console.error('Loader runtime error', err);
    }
  })();
  